# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-07 03:38
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, verbose_name='username')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='After_Sale_Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warranty', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speaker', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Battery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('battery_type', models.CharField(blank=True, max_length=100, null=True)),
                ('battery_cell', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Chipset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpu_model', models.CharField(blank=True, max_length=100, null=True)),
                ('gpu_memory_shared', models.CharField(blank=True, max_length=100, null=True)),
                ('hdmi_port', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Computer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(upload_to='computers/%Y/%m/%d')),
                ('color', models.CharField(blank=True, max_length=100, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('stock', models.PositiveIntegerField()),
                ('available', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Computer_Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(blank=True, max_length=100, null=True)),
                ('brand_logo', models.ImageField(upload_to='brand/%Y/%m/%d')),
            ],
        ),
        migrations.CreateModel(
            name='Computer_Feature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processor', models.CharField(blank=True, max_length=100, null=True)),
                ('ram', models.CharField(blank=True, max_length=100, null=True)),
                ('inbuilt_hdd', models.CharField(blank=True, max_length=100, null=True)),
                ('os', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Computer_kind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
            ],
            options={
                'ordering': ('name',),
                'verbose_name_plural': 'computer_kinds',
            },
        ),
        migrations.CreateModel(
            name='Computer_Specification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processor_description', models.CharField(blank=True, max_length=100, null=True)),
                ('hard_drive', models.CharField(blank=True, max_length=100, null=True)),
                ('after_sale_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.After_Sale_Service')),
                ('audio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Audio')),
                ('battery', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Battery')),
                ('chipset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Chipset')),
            ],
        ),
        migrations.CreateModel(
            name='Connectivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usb_port', models.BooleanField()),
                ('bluetooth', models.CharField(blank=True, max_length=100, null=True)),
                ('digital_media_reader', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dimension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dimensions', models.CharField(blank=True, max_length=100, null=True)),
                ('weight', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Display_Features',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screen_size', models.CharField(blank=True, max_length=100, null=True)),
                ('maximum_display_resolution', models.CharField(blank=True, max_length=100, null=True)),
                ('panel_type', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Memory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ram', models.CharField(blank=True, max_length=100, null=True)),
                ('memory_type', models.CharField(blank=True, max_length=100, null=True)),
                ('speed', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Operating_System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('os', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='computer_specification',
            name='connectivity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Connectivity'),
        ),
        migrations.AddField(
            model_name='computer_specification',
            name='dimension',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Dimension'),
        ),
        migrations.AddField(
            model_name='computer_specification',
            name='display_features',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Display_Features'),
        ),
        migrations.AddField(
            model_name='computer_specification',
            name='memory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Memory'),
        ),
        migrations.AddField(
            model_name='computer_specification',
            name='operating_systems',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Operating_System'),
        ),
        migrations.AddField(
            model_name='computer',
            name='brand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Computer_Brand'),
        ),
        migrations.AddField(
            model_name='computer',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='computers', to='fpickapp.Category'),
        ),
        migrations.AddField(
            model_name='computer',
            name='computer_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='computers', to='fpickapp.Computer_kind'),
        ),
        migrations.AddField(
            model_name='computer',
            name='feature',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Computer_Feature'),
        ),
        migrations.AddField(
            model_name='computer',
            name='specification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fpickapp.Computer_Specification'),
        ),
    ]
